/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.cineotaku.proyecto_cine.vista;

import com.cineotaku.proyecto_cine.controlador.CineControlador;

/**
 *
 * @author User
 */

import com.cineotaku.proyecto_cine.controlador.*;
import com.cineotaku.proyecto_cine.modelo.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class VentanaPrincipal extends javax.swing.JFrame {
    private CineControlador controlador;
    
    public VentanaPrincipal(CineControlador controlador) {
        this.controlador = controlador;
        initComponents();
        configurarVentana();
        cargarDatosEmpleado();
        cargarPeliculas();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        panelSuperior = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblEmpleado = new javax.swing.JLabel();
        btnCerrarSesion = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        panelPeliculas = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cine Otaku - Cartelera");

        panelSuperior.setBackground(new java.awt.Color(25, 25, 112));
        panelSuperior.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 30, 15, 30)); // Padding aumentado
        panelSuperior.setLayout(new java.awt.BorderLayout());

        lblTitulo.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N - Tamaño aumentado para pantalla completa
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setText("CARTELERA OTAKU");
        panelSuperior.add(lblTitulo, java.awt.BorderLayout.LINE_START);

        lblEmpleado.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N - Tamaño aumentado
        lblEmpleado.setForeground(new java.awt.Color(255, 255, 255));
        lblEmpleado.setText("Empleado");
        lblEmpleado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panelSuperior.add(lblEmpleado, java.awt.BorderLayout.CENTER);

        btnCerrarSesion.setBackground(new java.awt.Color(220, 20, 60));
        btnCerrarSesion.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N - Tamaño aumentado
        btnCerrarSesion.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrarSesion.setText("Cerrar Sesión");
        btnCerrarSesion.setBorderPainted(false);
        btnCerrarSesion.setFocusPainted(false);
        btnCerrarSesion.setPreferredSize(new java.awt.Dimension(150, 40)); // Botón más grande
        btnCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionActionPerformed(evt);
            }
        });
        panelSuperior.add(btnCerrarSesion, java.awt.BorderLayout.LINE_END);

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);

        panelPeliculas.setBackground(new java.awt.Color(240, 248, 255));
        panelPeliculas.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 30, 30, 30)); // Padding aumentado
        panelPeliculas.setLayout(new java.awt.GridLayout(2, 3, 20, 20)); // Cambiado a 3 columnas y 2 filas
        scrollPane.setViewportView(panelPeliculas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSuperior, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE) // Altura aumentada
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)) // Altura aumentada
        );

        pack();
    }// </editor-fold>

    private void btnCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {
        cerrarSesion();
    }
    
    private void configurarVentana() {
        // Configurar para pantalla completa
        configurarTamañoPantalla();
        
        // Agregar tecla ESC para mostrar diálogo de cerrar sesión (opcional)
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    cerrarSesion();
                }
            }
        });
        setFocusable(true);
        requestFocus();
    }
    
    private void configurarTamañoPantalla() {
        // Obtener dimensiones de la pantalla
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        
        // Establecer tamaño completo de pantalla
        setSize(screenSize.width, screenSize.height);
        
        // Centrar en pantalla
        setLocationRelativeTo(null);
        
        // Iniciar maximizada
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        // Mantener redimensionamiento para maximización
        setResizable(true);
    }
    
    private void cargarDatosEmpleado() {
        String nombreEmpleado = controlador.getEmpleadoControlador().getEmpleadoActual().getNombreCompleto();
        lblEmpleado.setText(nombreEmpleado);
    }
    
    private void cargarPeliculas() {
        panelPeliculas.removeAll();
        List<Pelicula> peliculas = controlador.obtenerPeliculasEnCartelera();
        
        for (Pelicula pelicula : peliculas) {
            JPanel cardPelicula = crearCardPelicula(pelicula);
            panelPeliculas.add(cardPelicula);
        }
        
        panelPeliculas.revalidate();
        panelPeliculas.repaint();
    }
    
    private JPanel crearCardPelicula(Pelicula pelicula) {
        JPanel card = new JPanel(new BorderLayout());
        card.setBackground(Color.WHITE);
        card.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200), 2), // Borde más grueso
            BorderFactory.createEmptyBorder(20, 20, 20, 20) // Padding aumentado
        ));
        card.setPreferredSize(new Dimension(280, 450)); // Aumentado para acomodar imagen 2:3
        
        // Título y género - usando BoxLayout para controlar mejor el espaciado
        JPanel panelInfo = new JPanel();
        panelInfo.setLayout(new BoxLayout(panelInfo, BoxLayout.Y_AXIS));
        panelInfo.setBackground(Color.WHITE);
        
        JLabel lblTituloPelicula = new JLabel("<html><b>" + pelicula.getTitulo() + "</b></html>");
        lblTituloPelicula.setFont(new Font("Arial", Font.BOLD, 14)); // Tamaño reducido
        lblTituloPelicula.setHorizontalAlignment(SwingConstants.CENTER);
        lblTituloPelicula.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JLabel lblGenero = new JLabel("Género: " + pelicula.getGenero());
        lblGenero.setFont(new Font("Arial", Font.PLAIN, 12)); // Tamaño reducido
        lblGenero.setHorizontalAlignment(SwingConstants.CENTER);
        lblGenero.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JLabel lblClasificacion = new JLabel("Clasificación: " + pelicula.getClasificacion());
        lblClasificacion.setFont(new Font("Arial", Font.PLAIN, 12)); // Tamaño reducido
        lblClasificacion.setHorizontalAlignment(SwingConstants.CENTER);
        lblClasificacion.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JLabel lblDuracion = new JLabel("Duración: " + pelicula.getDuracionFormateada());
        lblDuracion.setFont(new Font("Arial", Font.PLAIN, 12)); // Tamaño reducido
        lblDuracion.setHorizontalAlignment(SwingConstants.CENTER);
        lblDuracion.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        JButton btnSeleccionar = new JButton("Ver Funciones");
        btnSeleccionar.setBackground(new Color(255, 165, 0));
        btnSeleccionar.setForeground(Color.WHITE);
        btnSeleccionar.setFocusPainted(false);
        btnSeleccionar.setBorderPainted(false);
        btnSeleccionar.setFont(new Font("Arial", Font.BOLD, 12)); // Tamaño reducido
        btnSeleccionar.setPreferredSize(new Dimension(160, 30)); // Botón más pequeño
        btnSeleccionar.setMaximumSize(new Dimension(160, 30));
        btnSeleccionar.setAlignmentX(Component.CENTER_ALIGNMENT);
        btnSeleccionar.addActionListener(e -> abrirVentanaPelicula(pelicula));
        
        panelInfo.add(lblTituloPelicula);
        panelInfo.add(lblGenero);
        panelInfo.add(lblClasificacion);
        panelInfo.add(lblDuracion);
        panelInfo.add(Box.createVerticalStrut(5)); // Espacio más pequeño antes del botón
        panelInfo.add(btnSeleccionar);
        
        // Imagen del poster
        JPanel panelImagen = new JPanel(new BorderLayout());
        panelImagen.setBackground(new Color(230, 230, 230));
        panelImagen.setPreferredSize(new Dimension(230, 345)); // Proporción 2:3 cinematográfica
        panelImagen.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 2));
        
        // Cargar imagen del poster
        JLabel lblImagen = new JLabel();
        lblImagen.setHorizontalAlignment(SwingConstants.CENTER);
        lblImagen.setVerticalAlignment(SwingConstants.CENTER);
        
        try {
            // Obtener el nombre de la imagen basado en el título de la película
            String nombreImagen = obtenerNombreImagen(pelicula.getTitulo());
            java.net.URL imgURL = null;
            
            // Probar diferentes rutas posibles
            String[] rutasPosibles = {
                "/" + nombreImagen,
                "/resources/" + nombreImagen,
                "/src/resources/" + nombreImagen,
                nombreImagen
            };
            
            for (String ruta : rutasPosibles) {
                imgURL = getClass().getResource(ruta);
                if (imgURL != null) {
                    System.out.println("Imagen encontrada en: " + ruta); // Para debug
                    break;
                }
            }
            
            if (imgURL != null) {
                ImageIcon iconoOriginal = new ImageIcon(imgURL);
                // Redimensionar la imagen para que se ajuste al panel manteniendo proporción
                Image imagenRedimensionada = iconoOriginal.getImage().getScaledInstance(
                    226, 341, Image.SCALE_SMOOTH); // Tamaño ajustado al panel menos el borde
                ImageIcon iconoRedimensionado = new ImageIcon(imagenRedimensionada);
                lblImagen.setIcon(iconoRedimensionado);
            } else {
                // Si no se encuentra la imagen, mostrar placeholder y debug info
                lblImagen.setText("POSTER");
                lblImagen.setFont(new Font("Arial", Font.BOLD, 16));
                lblImagen.setForeground(Color.GRAY);
                System.out.println("No se encontró imagen para: " + nombreImagen); // Para debug
            }
        } catch (Exception e) {
            // En caso de error, mostrar placeholder y error
            lblImagen.setText("POSTER");
            lblImagen.setFont(new Font("Arial", Font.BOLD, 16));
            lblImagen.setForeground(Color.GRAY);
            System.out.println("Error cargando imagen: " + e.getMessage()); // Para debug
        }
        
        panelImagen.add(lblImagen, BorderLayout.CENTER);
        
        card.add(panelImagen, BorderLayout.CENTER);
        card.add(panelInfo, BorderLayout.SOUTH);
        
        return card;
    }
    
    
    private String obtenerNombreImagen(String tituloPelicula) {
        // Mapear títulos de películas a nombres de archivos de imagen
        String nombreBase = "";
        
        switch (tituloPelicula.toLowerCase().trim()) {
            case "demon slayer: infinity castle":
            case "demon slayer":
                nombreBase = "DemonSlayer";
                break;
            case "jujutsu kaisen":
            case "jujutsu kaisen 0":
                nombreBase = "jujutsukaisen";
                break;
            case "batman ninja":
            case "batman ninja vs":
                nombreBase = "batman-ninja-vs-3840x2160-21646";
                break;
            case "my hero academia":
            case "my hero":
            case "myhero":
                nombreBase = "Myhero";
                break;
            case "princess mononoke":
            case "mononoke":
                nombreBase = "Mononoke";
                break;
            case "chainsaw man":
                nombreBase = "ChainSawMan";
                break;
            default:
                // Si no coincide exactamente, intentar buscar por palabras clave
                String tituloLower = tituloPelicula.toLowerCase();
                if (tituloLower.contains("demon") || tituloLower.contains("slayer")) {
                    nombreBase = "DemonSlayer";
                } else if (tituloLower.contains("jujutsu")) {
                    nombreBase = "jujutsukaisen";
                } else if (tituloLower.contains("batman")) {
                    nombreBase = "batman-ninja-vs-3840x2160-21646";
                } else if (tituloLower.contains("hero")) {
                    nombreBase = "Myhero";
                } else if (tituloLower.contains("mononoke")) {
                    nombreBase = "Mononoke";
                } else if (tituloLower.contains("chainsaw")) {
                    nombreBase = "ChainSawMan";
                } else {
                    nombreBase = "poster_default";
                }
        }
        
        // Probar diferentes extensiones
        String[] extensiones = {".jpg", ".jpeg", ".png", ".gif", ".bmp"};
        
        for (String ext : extensiones) {
            String nombreCompleto = nombreBase + ext;
            // Verificar si el recurso existe
            java.net.URL testURL = getClass().getResource("/" + nombreCompleto);
            if (testURL != null) {
                System.out.println("Usando imagen: " + nombreCompleto); // Para debug
                return nombreCompleto;
            }
        }
        
        // Si no se encuentra con ninguna extensión, devolver con .jpg por defecto
        System.out.println("No se encontró imagen para: " + nombreBase + " - usando .jpg por defecto"); // Para debug
        return nombreBase + ".jpg";
    }
    
    private void abrirVentanaPelicula(Pelicula pelicula) {
        new VentanaPelicula(controlador, pelicula).setVisible(true);
    }
    
    private void cerrarSesion() {
        int opcion = JOptionPane.showConfirmDialog(this, 
            "¿Está seguro que desea cerrar sesión?", 
            "Confirmar", 
            JOptionPane.YES_NO_OPTION);
        
        if (opcion == JOptionPane.YES_OPTION) {
            controlador.getEmpleadoControlador().cerrarSesion();
            new VentanaInicio().setVisible(true);
            dispose();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Ejemplo de uso - necesitarás instancias reales
                // new VentanaPrincipal(controlador).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnCerrarSesion;
    private javax.swing.JLabel lblEmpleado;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel panelPeliculas;
    private javax.swing.JPanel panelSuperior;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration
}